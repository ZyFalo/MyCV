"""
Django settings for portfolio_cms project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import warnings
from pathlib import Path
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
# Production MUST set SECRET_KEY as an environment variable.
_raw_secret = os.environ.get('SECRET_KEY')
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

if not _raw_secret:
    allow_temp = os.environ.get('ALLOW_TEMP_SECRET_KEY', 'False').lower() == 'true'
    if DEBUG or allow_temp:
        # Temporary insecure key (DO NOT use long-term in production)
        SECRET_KEY = 'insecure-temp-secret-key-change-me-please'
        if not DEBUG:
            warnings.warn('Using temporary insecure SECRET_KEY in production. Set SECRET_KEY env var ASAP.', RuntimeWarning)
    else:
        raise RuntimeError('SECRET_KEY environment variable is required in production. Set it in Railway variables.')
else:
    if _raw_secret.startswith('django-insecure') and not DEBUG:
        raise RuntimeError('Replace autogenerated django-insecure SECRET_KEY with a strong value for production.')
    SECRET_KEY = _raw_secret

# SECURITY WARNING: DEBUG already resolved above

_default_hosts = ['localhost', '127.0.0.1']
railway_domain = os.environ.get('RAILWAY_STATIC_URL') or os.environ.get('RAILWAY_PUBLIC_DOMAIN')
if railway_domain:
    # Ensure we only keep hostname part
    railway_domain = railway_domain.replace('https://', '').replace('http://', '').strip('/')
    _default_hosts.append(railway_domain)
    _default_hosts.append(f'.{railway_domain}')

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS')
if ALLOWED_HOSTS:
    ALLOWED_HOSTS = [h.strip() for h in ALLOWED_HOSTS.split(',') if h.strip()]
else:
    ALLOWED_HOSTS = _default_hosts

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'contact',
    'fyqs',
    'books'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'portfolio_cms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
    # Discover possible frontend template directories (works both locally and in container)
    'DIRS': [p for p in [BASE_DIR / 'frontend', BASE_DIR.parent / 'frontend'] if p.exists()],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portfolio_cms.wsgi.application'

# Database
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.parse(
            DATABASE_URL,
            conn_max_age=600,
            ssl_require=(os.environ.get('PGSSLMODE', '').lower() == 'require')
        )
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Static sources (include root frontend folder if present)
_frontend_candidates = [BASE_DIR / 'frontend', BASE_DIR.parent / 'frontend']
STATICFILES_DIRS = [str(p) for p in _frontend_candidates if p.exists()]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Railway specific settings
PORT = os.environ.get('PORT', '8000')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Production settings
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    REFERRER_POLICY = 'strict-origin-when-cross-origin'
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # Security settings for production (uncomment when ready for full security)
    if os.environ.get('RAILWAY_ENVIRONMENT') or os.environ.get('ENABLE_SSL', 'False').lower() == 'true':
        SECURE_SSL_REDIRECT = True
        SECURE_HSTS_SECONDS = 31536000
        SECURE_HSTS_INCLUDE_SUBDOMAINS = True
        SECURE_HSTS_PRELOAD = True
        SESSION_COOKIE_SECURE = True
        CSRF_COOKIE_SECURE = True
        SESSION_COOKIE_SAMESITE = 'Lax'
        CSRF_COOKIE_SAMESITE = 'Lax'